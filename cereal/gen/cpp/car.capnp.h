// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: car.capnp

#ifndef CAPNP_INCLUDED_8e2af1e708af8b8d_
#define CAPNP_INCLUDED_8e2af1e708af8b8d_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9da4fa09e052903c);
CAPNP_DECLARE_SCHEMA(991a37a6155935a3);
CAPNP_DECLARE_SCHEMA(e64e81478e6e60af);
CAPNP_DECLARE_SCHEMA(baa8c5d505f727de);
enum class Error_baa8c5d505f727de: uint16_t {
  COMM_ISSUE,
  STEER_UNAVAILABLE,
  BRAKE_UNAVAILABLE,
  GAS_UNAVAILABLE,
  WRONG_GEAR,
  DOOR_OPEN,
  SEATBELT_NOT_LATCHED,
  ESP_DISABLED,
  WRONG_CAR_MODE,
  STEER_TEMPORARILY_UNAVAILABLE,
  REVERSE_GEAR,
};
CAPNP_DECLARE_ENUM(Error, baa8c5d505f727de);
CAPNP_DECLARE_SCHEMA(ff5ca6835b4acef6);
CAPNP_DECLARE_SCHEMA(e16100205414717c);
enum class Type_e16100205414717c: uint16_t {
  UNKNOWN,
  LEFT_BLINKER,
  RIGHT_BLINKER,
  ACCEL_CRUISE,
  DECEL_CRUISE,
  CANCEL,
  ALT_BUTTON1,
  ALT_BUTTON2,
  ALT_BUTTON3,
};
CAPNP_DECLARE_ENUM(Type, e16100205414717c);
CAPNP_DECLARE_SCHEMA(888ad6581cf0aacb);
CAPNP_DECLARE_SCHEMA(e8a86679ebba76ad);
enum class Error_e8a86679ebba76ad: uint16_t {
  NOT_VALID,
};
CAPNP_DECLARE_ENUM(Error, e8a86679ebba76ad);
CAPNP_DECLARE_SCHEMA(8ff333ebac1fdf36);
CAPNP_DECLARE_SCHEMA(f78829049ab814af);
CAPNP_DECLARE_SCHEMA(b20e386e0e0ba8d3);
CAPNP_DECLARE_SCHEMA(d895c87c4eb03a38);
CAPNP_DECLARE_SCHEMA(90d78e84616e17d4);
enum class VisualAlert_90d78e84616e17d4: uint16_t {
  NONE,
  FCW,
  STEER_REQUIRED,
  BRAKE_PRESSED,
  WRONG_GEAR,
  SEATBELT_UNBUCKLED,
  SPEED_TOO_HIGH,
};
CAPNP_DECLARE_ENUM(VisualAlert, 90d78e84616e17d4);
CAPNP_DECLARE_SCHEMA(f5a5e26c954e339e);
enum class AudibleAlert_f5a5e26c954e339e: uint16_t {
  NONE,
  BEEP_SINGLE,
  BEEP_TRIPLE,
  BEEP_REPEATED,
  CHIME_SINGLE,
  CHIME_DOUBLE,
  CHIME_REPEATED,
  CHIME_CONTINUOUS,
};
CAPNP_DECLARE_ENUM(AudibleAlert, f5a5e26c954e339e);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct CarState {
  CarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct WheelSpeeds;
  struct CruiseState;
  typedef ::capnp::schemas::Error_baa8c5d505f727de Error;

  struct ButtonEvent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da4fa09e052903c, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarState::WheelSpeeds {
  WheelSpeeds() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(991a37a6155935a3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarState::CruiseState {
  CruiseState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e64e81478e6e60af, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarState::ButtonEvent {
  ButtonEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e16100205414717c Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff5ca6835b4acef6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RadarState {
  RadarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Error_e8a86679ebba76ad Error;

  struct RadarPoint;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888ad6581cf0aacb, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RadarState::RadarPoint {
  RadarPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ff333ebac1fdf36, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarControl {
  CarControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct CruiseControl;
  struct HUDControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f78829049ab814af, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::CruiseControl {
  CruiseControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b20e386e0e0ba8d3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::HUDControl {
  HUDControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VisualAlert_90d78e84616e17d4 VisualAlert;

  typedef ::capnp::schemas::AudibleAlert_f5a5e26c954e339e AudibleAlert;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d895c87c4eb03a38, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CarState::Reader {
public:
  typedef CarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasErrors() const;
  inline  ::capnp::List< ::cereal::CarState::Error>::Reader getErrors() const;

  inline float getVEgo() const;

  inline bool hasWheelSpeeds() const;
  inline  ::cereal::CarState::WheelSpeeds::Reader getWheelSpeeds() const;

  inline float getGas() const;

  inline bool getGasPressed() const;

  inline float getBrake() const;

  inline bool getBrakePressed() const;

  inline float getSteeringAngle() const;

  inline float getSteeringTorque() const;

  inline bool getSteeringPressed() const;

  inline bool hasCruiseState() const;
  inline  ::cereal::CarState::CruiseState::Reader getCruiseState() const;

  inline bool hasButtonEvents() const;
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader getButtonEvents() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::Builder {
public:
  typedef CarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrors();
  inline  ::capnp::List< ::cereal::CarState::Error>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::cereal::CarState::Error>::Reader value);
  inline void setErrors(::kj::ArrayPtr<const  ::cereal::CarState::Error> value);
  inline  ::capnp::List< ::cereal::CarState::Error>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::cereal::CarState::Error>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::Error>> disownErrors();

  inline float getVEgo();
  inline void setVEgo(float value);

  inline bool hasWheelSpeeds();
  inline  ::cereal::CarState::WheelSpeeds::Builder getWheelSpeeds();
  inline void setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value);
  inline  ::cereal::CarState::WheelSpeeds::Builder initWheelSpeeds();
  inline void adoptWheelSpeeds(::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> disownWheelSpeeds();

  inline float getGas();
  inline void setGas(float value);

  inline bool getGasPressed();
  inline void setGasPressed(bool value);

  inline float getBrake();
  inline void setBrake(float value);

  inline bool getBrakePressed();
  inline void setBrakePressed(bool value);

  inline float getSteeringAngle();
  inline void setSteeringAngle(float value);

  inline float getSteeringTorque();
  inline void setSteeringTorque(float value);

  inline bool getSteeringPressed();
  inline void setSteeringPressed(bool value);

  inline bool hasCruiseState();
  inline  ::cereal::CarState::CruiseState::Builder getCruiseState();
  inline void setCruiseState( ::cereal::CarState::CruiseState::Reader value);
  inline  ::cereal::CarState::CruiseState::Builder initCruiseState();
  inline void adoptCruiseState(::capnp::Orphan< ::cereal::CarState::CruiseState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::CruiseState> disownCruiseState();

  inline bool hasButtonEvents();
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder getButtonEvents();
  inline void setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder initButtonEvents(unsigned int size);
  inline void adoptButtonEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>> disownButtonEvents();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::Pipeline {
public:
  typedef CarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarState::WheelSpeeds::Pipeline getWheelSpeeds();
  inline  ::cereal::CarState::CruiseState::Pipeline getCruiseState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::WheelSpeeds::Reader {
public:
  typedef WheelSpeeds Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getFl() const;

  inline float getFr() const;

  inline float getRl() const;

  inline float getRr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::WheelSpeeds::Builder {
public:
  typedef WheelSpeeds Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFl();
  inline void setFl(float value);

  inline float getFr();
  inline void setFr(float value);

  inline float getRl();
  inline void setRl(float value);

  inline float getRr();
  inline void setRr(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::WheelSpeeds::Pipeline {
public:
  typedef WheelSpeeds Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::CruiseState::Reader {
public:
  typedef CruiseState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getSpeed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::CruiseState::Builder {
public:
  typedef CruiseState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getSpeed();
  inline void setSpeed(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::CruiseState::Pipeline {
public:
  typedef CruiseState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::ButtonEvent::Reader {
public:
  typedef ButtonEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getPressed() const;

  inline  ::cereal::CarState::ButtonEvent::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::ButtonEvent::Builder {
public:
  typedef ButtonEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPressed();
  inline void setPressed(bool value);

  inline  ::cereal::CarState::ButtonEvent::Type getType();
  inline void setType( ::cereal::CarState::ButtonEvent::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::ButtonEvent::Pipeline {
public:
  typedef ButtonEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::Reader {
public:
  typedef RadarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasErrors() const;
  inline  ::capnp::List< ::cereal::RadarState::Error>::Reader getErrors() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Reader getPoints() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::Builder {
public:
  typedef RadarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrors();
  inline  ::capnp::List< ::cereal::RadarState::Error>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::cereal::RadarState::Error>::Reader value);
  inline void setErrors(::kj::ArrayPtr<const  ::cereal::RadarState::Error> value);
  inline  ::capnp::List< ::cereal::RadarState::Error>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::cereal::RadarState::Error>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::Error>> disownErrors();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::RadarState::RadarPoint>::Reader value);
  inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::RadarState::RadarPoint>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::RadarPoint>> disownPoints();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::Pipeline {
public:
  typedef RadarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::RadarPoint::Reader {
public:
  typedef RadarPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getYvRel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::RadarPoint::Builder {
public:
  typedef RadarPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId();
  inline void setTrackId( ::uint64_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getYvRel();
  inline void setYvRel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::RadarPoint::Pipeline {
public:
  typedef RadarPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Reader {
public:
  typedef CarControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getGas() const;

  inline float getBrake() const;

  inline float getSteeringTorque() const;

  inline bool hasCruiseControl() const;
  inline  ::cereal::CarControl::CruiseControl::Reader getCruiseControl() const;

  inline bool hasHudControl() const;
  inline  ::cereal::CarControl::HUDControl::Reader getHudControl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Builder {
public:
  typedef CarControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getGas();
  inline void setGas(float value);

  inline float getBrake();
  inline void setBrake(float value);

  inline float getSteeringTorque();
  inline void setSteeringTorque(float value);

  inline bool hasCruiseControl();
  inline  ::cereal::CarControl::CruiseControl::Builder getCruiseControl();
  inline void setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value);
  inline  ::cereal::CarControl::CruiseControl::Builder initCruiseControl();
  inline void adoptCruiseControl(::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> disownCruiseControl();

  inline bool hasHudControl();
  inline  ::cereal::CarControl::HUDControl::Builder getHudControl();
  inline void setHudControl( ::cereal::CarControl::HUDControl::Reader value);
  inline  ::cereal::CarControl::HUDControl::Builder initHudControl();
  inline void adoptHudControl(::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> disownHudControl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Pipeline {
public:
  typedef CarControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarControl::CruiseControl::Pipeline getCruiseControl();
  inline  ::cereal::CarControl::HUDControl::Pipeline getHudControl();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::CruiseControl::Reader {
public:
  typedef CruiseControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getCancel() const;

  inline bool getOverride() const;

  inline float getSpeedOverride() const;

  inline float getAccelOverride() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::CruiseControl::Builder {
public:
  typedef CruiseControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCancel();
  inline void setCancel(bool value);

  inline bool getOverride();
  inline void setOverride(bool value);

  inline float getSpeedOverride();
  inline void setSpeedOverride(float value);

  inline float getAccelOverride();
  inline void setAccelOverride(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::CruiseControl::Pipeline {
public:
  typedef CruiseControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::HUDControl::Reader {
public:
  typedef HUDControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible() const;

  inline float getSetSpeed() const;

  inline bool getLanesVisible() const;

  inline bool getLeadVisible() const;

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::HUDControl::Builder {
public:
  typedef HUDControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible();
  inline void setSpeedVisible(bool value);

  inline float getSetSpeed();
  inline void setSetSpeed(float value);

  inline bool getLanesVisible();
  inline void setLanesVisible(bool value);

  inline bool getLeadVisible();
  inline void setLeadVisible(bool value);

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert();
  inline void setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert();
  inline void setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::HUDControl::Pipeline {
public:
  typedef HUDControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool CarState::Reader::hasErrors() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasErrors() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarState::Error>::Reader CarState::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarState::Error>::Builder CarState::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CarState::Builder::setErrors( ::capnp::List< ::cereal::CarState::Error>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setErrors(::kj::ArrayPtr<const  ::cereal::CarState::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarState::Error>::Builder CarState::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarState::Error>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::Error>> CarState::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::Error>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float CarState::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgo() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasWheelSpeeds() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasWheelSpeeds() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::WheelSpeeds::Reader CarState::Reader::getWheelSpeeds() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::getWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::WheelSpeeds::Pipeline CarState::Pipeline::getWheelSpeeds() {
  return  ::cereal::CarState::WheelSpeeds::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::initWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptWheelSpeeds(
    ::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> CarState::Builder::disownWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline float CarState::Reader::getGas() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getGas() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGas(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGasPressed() const {
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGasPressed() {
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGasPressed(bool value) {
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getBrake() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getBrake() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakePressed() const {
  return _reader.getDataField<bool>(
      65 * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakePressed() {
  return _builder.getDataField<bool>(
      65 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakePressed(bool value) {
  _builder.setDataField<bool>(
      65 * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngle() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngle() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngle(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorque() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorque() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorque(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringPressed() const {
  return _reader.getDataField<bool>(
      66 * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringPressed() {
  return _builder.getDataField<bool>(
      66 * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringPressed(bool value) {
  _builder.setDataField<bool>(
      66 * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasCruiseState() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCruiseState() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::CruiseState::Reader CarState::Reader::getCruiseState() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::getCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::CruiseState::Pipeline CarState::Pipeline::getCruiseState() {
  return  ::cereal::CarState::CruiseState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setCruiseState( ::cereal::CarState::CruiseState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::initCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptCruiseState(
    ::capnp::Orphan< ::cereal::CarState::CruiseState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::CruiseState> CarState::Builder::disownCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasButtonEvents() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasButtonEvents() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader CarState::Reader::getButtonEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder CarState::Builder::getButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void CarState::Builder::setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder CarState::Builder::initButtonEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptButtonEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>> CarState::Builder::disownButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader CarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder CarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void CarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder CarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> CarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline float CarState::WheelSpeeds::Reader::getFl() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFl() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFl(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFr() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFr() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFr(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRl() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRl() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRl(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRr() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRr() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRr(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeed() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool CarState::ButtonEvent::Reader::getPressed() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool CarState::ButtonEvent::Builder::getPressed() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setPressed(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      1 * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      1 * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setType( ::cereal::CarState::ButtonEvent::Type value) {
  _builder.setDataField< ::cereal::CarState::ButtonEvent::Type>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasErrors() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasErrors() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarState::Error>::Reader RadarState::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarState::Error>::Builder RadarState::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RadarState::Builder::setErrors( ::capnp::List< ::cereal::RadarState::Error>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setErrors(::kj::ArrayPtr<const  ::cereal::RadarState::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarState::Error>::Builder RadarState::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::Error>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::Error>> RadarState::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::Error>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasPoints() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasPoints() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Reader RadarState::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Builder RadarState::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RadarState::Builder::setPoints( ::capnp::List< ::cereal::RadarState::RadarPoint>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarState::RadarPoint>::Builder RadarState::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::RadarPoint>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarState::RadarPoint>> RadarState::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarState::RadarPoint>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader RadarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder RadarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void RadarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder RadarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> RadarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t RadarState::RadarPoint::Reader::getTrackId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::RadarPoint::Builder::getTrackId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setTrackId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline float RadarState::RadarPoint::Reader::getDRel() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float RadarState::RadarPoint::Builder::getDRel() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float RadarState::RadarPoint::Reader::getYRel() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float RadarState::RadarPoint::Builder::getYRel() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float RadarState::RadarPoint::Reader::getVRel() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float RadarState::RadarPoint::Builder::getVRel() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float RadarState::RadarPoint::Reader::getARel() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float RadarState::RadarPoint::Builder::getARel() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setARel(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline float RadarState::RadarPoint::Reader::getYvRel() const {
  return _reader.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}

inline float RadarState::RadarPoint::Builder::getYvRel() {
  return _builder.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}
inline void RadarState::RadarPoint::Builder::setYvRel(float value) {
  _builder.setDataField<float>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getGas() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getGas() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setGas(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getBrake() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getBrake() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getSteeringTorque() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getSteeringTorque() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setSteeringTorque(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasCruiseControl() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasCruiseControl() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::CruiseControl::Reader CarControl::Reader::getCruiseControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::getCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::CruiseControl::Pipeline CarControl::Pipeline::getCruiseControl() {
  return  ::cereal::CarControl::CruiseControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::initCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptCruiseControl(
    ::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> CarControl::Builder::disownCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasHudControl() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasHudControl() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::HUDControl::Reader CarControl::Reader::getHudControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::getHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::HUDControl::Pipeline CarControl::Pipeline::getHudControl() {
  return  ::cereal::CarControl::HUDControl::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setHudControl( ::cereal::CarControl::HUDControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::initHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptHudControl(
    ::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> CarControl::Builder::disownHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool CarControl::CruiseControl::Reader::getCancel() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getCancel() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setCancel(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getOverride() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getOverride() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setOverride(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getSpeedOverride() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getSpeedOverride() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setSpeedOverride(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getAccelOverride() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getAccelOverride() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setAccelOverride(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getSpeedVisible() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getSpeedVisible() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSpeedVisible(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline float CarControl::HUDControl::Reader::getSetSpeed() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float CarControl::HUDControl::Builder::getSetSpeed() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSetSpeed(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLanesVisible() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLanesVisible() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLanesVisible(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeadVisible() const {
  return _reader.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeadVisible() {
  return _builder.getDataField<bool>(
      2 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeadVisible(bool value) {
  _builder.setDataField<bool>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Reader::getVisualAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      1 * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Builder::getVisualAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      1 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Reader::getAudibleAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      4 * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Builder::getAudibleAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      4 * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      4 * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_8e2af1e708af8b8d_
